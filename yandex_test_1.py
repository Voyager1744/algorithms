"""
Рано или поздно все крупные IT-компании создают свои дата-центры. Коля только
устроился в такую компанию и еще не успел во всем разобраться. В его компании
есть N дата-цетров,в каждом дата-центре установлено M серверов.
Из-за большой нагрузки серверы могут выключаться. Из-за спешки при постройке
дата-центров включить только один сервер не получается, поэтому приходится
перезагружать весь дата-центр. У каждого дата-центра есть два неотрицательных
целочисленных параметра:
Ri  — число перезапусков
i-го дата-центра и
Ai  — число рабочих (не выключенных) серверов на текущий момент в
i-м дата-центре.
Коля получил задачу по сбору некоторых метрик, которые в будущем позволят
улучшить работу дата-центов. Для этого Коля собрал данные о
Q событиях, произошедших за текущий день. Коля справился с этой задачей,
но просит помочь и проверить свои результаты.

Формат ввода
В первой строке входных данных записано 3 положительных целых числа
n,m,q (1≤q≤105,1≤n⋅m≤106) — число дата-центров, число серверов в каждом из
дата-центров и число событий соответственно.
В последующих q строках записаны события, которые могут иметь один из следующих
видов:
RESET i — был перезагружен i-й дата-центр
(1≤i≤n)

DISABLE i j — в i-м дата-центре был выключенj-й сервер
(1≤i≤n,1≤j≤m)

GETMAX — получить номер дата-центра с наибольшим произведением
Ri∗Ai

GETMIN — получить номер дата-центра с наименьшим произведением
Ri∗Ai
Формат вывода
На каждый запрос вида GETMIN или GETMAX выведите единственное положительное
целое число — номер дата-центра, подходящий под условие. В случае
неоднозначности ответа выведите номер наименьшего из дата-центров.
"""

n, m, q = map(int, input().split())

# создаем список для хранения количества перезапусков и рабочих серверов
data_centers = [[0, m] for _ in range(n)]


# определяем функцию для получения произведения R_i * A_i
def get_product(data_center):
    return data_center[0] * data_center[1]


# проходим по всем событиям и обрабатываем их
for _ in range(q):
    event = input().split()
    if event[0] == 'RESET':
        # если событие RESET, то перезагружаем весь дата-центр
        i = int(event[1]) - 1
        data_centers[i][0] += 1
        data_centers[i][1] = m
    elif event[0] == 'DISABLE':
        # если событие DISABLE, то выключаем соответствующий сервер
        i, j = map(int, event[1:])
        i -= 1
        j -= 1
        data_centers[i][1] -= 1
    elif event[0] == "GETMAX":
        # если событие GETMAX, то находим номер дата-центра
        # с наибольшим произведением R_i * A_i
        max_product = -1
        max_dc = -1
        for i in range(n):
            product = get_product(data_centers[i])
            if product > max_product:
                max_product = product
                max_dc = i
        print(max_dc + 1)
    elif event[0] == "GETMIN":
        # если событие GETMIN, то находим номер дата-центра
        # с наименьшим произведением R_i * A_i
        min_product = float('inf')
        min_dc = -1
        for i in range(n):
            product = get_product(data_centers[i])
            if product < min_product:
                min_product = product
                min_dc = i
        print(min_dc + 1)

class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None



'''
3 3 12
DISABLE 1 2
DISABLE 2 1
DISABLE 3 3
GETMAX
RESET 1
RESET 2
DISABLE 1 2
DISABLE 1 3
DISABLE 2 2
GETMAX
RESET 3
GETMIN


решение не проходит некоторые тесты
'''